pie(x, labels, main = "City pie chart", col = rainbow(length(x)))
# Save the file.
#dev.off()
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Give the chart file a name. stores the created chart in a file.
#png(file = "city_title_colours.jpg")
# Plot the chart with title and rainbow color pallet.
pie(x, labels, main = "City pie chart", col = rainbow(length(x)))
# Save the file.
#dev.off()
pie(x, labels, main = "City pie chart", col = rainbow(length(x)))
# Create data for the graph.
x <-  c(21, 62, 10,53)
labels <-  c("London","New York","Singapore","Mumbai")
piepercent<- round(100*x/sum(x), 1)
# Give the chart file a name.
png(file = "city_percentage_legends.jpg")
# Plot the chart.
pie(x, labels = piepercent, main = "City pie chart",col = rainbow(length(x)))
legend("topright", c("London","New York","Singapore","Mumbai"), cex = 0.8,
fill = rainbow(length(x)))
# Save the file.
#dev.off()
pie(x, labels = piepercent, main = "City pie chart",col = rainbow(length(x)))
installed.packages("pltrix")
installed.packages("plotrix")
# Get the library.
library(plotrix)
install.packages("plotrix")
install.packages("plotrix")
# Get the library.
library(plotrix)
# Create data for the graph.
x <-  c(21, 62, 10,53)
lbl <-  c("London","New York","Singapore","Mumbai")
# Give the chart file a name.
#png(file = "3d_pie_chart.jpg")
# Plot the chart.
pie3D(x,labels = lbl,explode = 0.1, main = "Pie Chart of Countries ")
# Save the file.
#dev.off()
pie3D(x,labels = lbl,explode = 0.1, main = "Pie Chart of Countries ")
input<-mtcars[,c('wt','mpg')]
head(input)
# Get the input values.
input <- mtcars[,c('wt','mpg')]
##We use the data set "mtcars" available in the R environment to create a basic scatterplot.
# Give the chart file a name.
#png(file = "scatterplot.png")
# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
# Save the file.
#dev.off()
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
pairs(~wt+mpg+disp+cyl,data = mtcars,
main = "Scatterplot Matrix")
# Give the chart file a name.
#png(file = "boxplot.png")
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars, xlab = "Number of Cylinders",
ylab = "Miles Per Gallon", main = "Mileage Data")
# Save the file.
#dev.off()
# Give the chart file a name.
#png(file = "boxplot_with_notch.png")
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
notch = TRUE,
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
# Save the file.
#dev.off()
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
notch = TRUE,
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
# Create data for the graph.
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "blue")
# Save the file.
#dev.off()
# Create data for the graph.
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow,blue",border = "blue")
# Create data for the graph.
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "blue",border = "blue")
# Save the file.
#dev.off()
# Create data for the graph.
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "blue",border = "yellow")
# Save the file.
#dev.off()
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,40), ylim = c(0,5),
breaks = 5)
# Save the file.
#dev.off()
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,60), ylim = c(0,5),
breaks = 5)
# Save the file.
#dev.off()
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,60), ylim = c(0,5),
breaks = 5)
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,50), ylim = c(0,5),
breaks = 5)
# Save the file.
#dev.off()
# Create the data for the chart.
H <- c(7,12,28,3,41)
# Give the chart file a name.
#png(file = "barchart.png")
# Plot the bar chart.
barplot(H)
# Save the file.
#dev.off()
# Save the file.
barplot(H)
# Create the data for the chart.
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Give the chart file a name.
#png(file = "barchart_months_revenue.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
# Save the file.
#dev.off()
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
barplot(H,ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
# Create the input vectors.
colors <- c("green","orange","brown")
months <- c("Mar","Apr","May","Jun","Jul")
regions <- c("East","West","North")
# Create the matrix of the values.
Values <- matrix(c(2,9,3,11,9,4,8,7,3,12,5,2,8,10,11),nrow = 3,ncol = 5,byrow = TRUE)
# Give the chart file a name.
#png(file = "barchart_stacked.png")
# Create the bar chart.
barplot(Values,main = "total revenue",names.arg = months,xlab = "month",ylab = "revenue",
col = colors)
# Add the legend to the chart.
legend("topleft", regions, cex = 1.3, fill = colors)
# Save the file.
#dev.off()
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
notch = TRUE,
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
#Partition the output window
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
#Next Graph
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "blue")
# Save the file.
#dev.off()
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
hist(v,xlab = "Weight",col = "yellow",border = "blue")
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
history(10)
print(history(10))
x<-1
# Create data for the graph.
x <- c(21, 62, 10, 53)
labels <- c("London", "New York", "Singapore", "Mumbai")
# Give the chart file a name. stores the created chart in a file.
#png(file = "city_title_colours.jpg")
# Plot the chart with title and rainbow color pallet.
pie(x, labels, main = "City pie chart", col = rainbow(length(x)))
# Save the file.
#dev.off()
pie(x, labels, main = "City pie chart", col = rainbow(length(x)))
# Get the input values.
input <- mtcars[,c('wt','mpg')]
##We use the data set "mtcars" available in the R environment to create a basic scatterplot.
# Give the chart file a name.
#png(file = "scatterplot.png")
# Plot the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
# Save the file.
#dev.off()
plot(x = input$wt,y = input$mpg,
xlab = "Weight",
ylab = "Milage",
xlim = c(2.5,5),
ylim = c(15,30),
main = "Weight vs Milage"
)
# Give the chart file a name.
#png(file = "scatterplot_matrices.png")
# Plot the matrices between 4 variables giving 12 plots.
# One variable with 3 others and total 4 variables.
pairs(~wt+mpg+disp+cyl,data = mtcars,
main = "Scatterplot Matrix")
# Save the file.
#dev.off()
# Save the file.
#dev.off()
?pairs
# Give the chart file a name.
#png(file = "boxplot.png")
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars, xlab = "Number of Cylinders",
ylab = "Miles Per Gallon", main = "Mileage Data")
# Save the file.
#dev.off()
# Create data for the graph.
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "blue",border = "yellow")
# Save the file.
#dev.off()
# Create data for the graph.
v <- c(9,13,21,8,36,22,12,41,31,33,19)
# Give the chart file a name.
#png(file = "histogram_lim_breaks.png")
# Create the histogram.
hist(v,xlab = "Weight",col = "green",border = "red", xlim = c(0,50), ylim = c(0,5),
breaks = 5)
# Save the file.
#dev.off()
# Create the data for the chart.
H <- c(7,12,28,3,41)
M <- c("Mar","Apr","May","Jun","Jul")
# Give the chart file a name.
#png(file = "barchart_months_revenue.png")
# Plot the bar chart.
barplot(H,names.arg = M,xlab = "Month",ylab = "Revenue",col = "blue",
main = "Revenue chart",border = "red")
#names.arg shows the labels on x-axis
# Save the file.
#dev.off()
#Partition the output window
par(mfrow = c(2, 1), mar = c(4, 4, 2, 1))
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
#Next Graph
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "blue")
# Save the file.
#dev.off()
#Partition the output window
par(mfrow = c(2, 1))
# Plot the chart.
boxplot(mpg ~ cyl, data = mtcars,
xlab = "Number of Cylinders",
ylab = "Miles Per Gallon",
main = "Mileage Data",
varwidth = TRUE,
col = c("green","yellow","purple"),
names = c("High","Medium","Low")
)
#Next Graph
v <-  c(9,13,21,8,36,22,12,41,31,33,19)
# Create the histogram.
hist(v,xlab = "Weight",col = "yellow",border = "blue")
# Save the file.
#dev.off()
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x ,trim=0.3)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x,trim=0.6)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x,trim=0.5)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x,trim=1)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x,trim=0.1)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x,trim=0.5)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x,trim=0.6)
print(result)
# Create a vector.
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
# Find Mean.
result <- mean(x,trim=0.4)
print(result)
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
x<-order(x)
x
x<-order(x,decreasing = FALSE)
x
x<-order(x,decreasing = T)
x
y <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
y[x]
as.integer(y[x])
y<-as.integer(y[x])
y
x <- c(12,47,53,4.2,18.4,2,-54,1,8,-9)
x
y
x <- as.integer(x)
x
y
mean(x)
mean(x,trim = 0.3)
mean(x,trim = 0.4)
mean(x,trim = 0.5)
x<-c(1,2,3,4,5)
mean(x,trim = 0.2)
n <- c(2,1,2,7,1,2,3,4,1,5,5,3,2,3)
uniqv <- unique(n)
v=n
match(v, uniqv)
uniqv
tabulate(match(v, uniqv))
which.max(tabulate(match(v, uniqv)))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with numbers.
n <- c(2,1,2,7,1,2,3,4,1,5,5,3,2,3)
# Calculate the mode using the user function.
result <- getmode(n)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Create the vector with numbers.
n <- c(2,1,2,7,1,2,3,4,1,5,5,3,2,3)
# Calculate the mode using the user function.
result <- getmode(n)
tabulate(match(v, uniqv))
n <- c(2,1,2,7,1,2,3,4,1,5,5,3,2,3)
unique(v)
uniqv <- unique(v)
match(v, uniqv)
tabulate(match(v, uniqv))
which.max(tabulate(match(v, uniqv)))
uniqv[which.max(tabulate(match(v, uniqv)))]
install.packages()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(Moments)
install.packages("moments")
install.packages("Moments")
install.packages("moments")
load("~/.RData")
load("C:/Users/Kartik/Desktop/.RData")
setwd("C:/Users/Kartik/Desktop/Hackathon")
c<-read.csv("rainfall.csv")
library(dplyr)
library(tseries)
head(c)
d=c
c<-filter(c,SD_Name=="CHATTISGARH")
c<-filter(c,YEAR<=2010)
c<-select(c,YEAR:DEC)
#d<-filter(d,YEAR>2010)
d<-filter(d,SD_Name=="CHATTISGARH")
d<-select(d,YEAR:DEC)
d<-filter(d,YEAR<=2013)
head(c)
library(reshape)
mel<-melt(c,c("YEAR"))
meld<-melt(d,c("YEAR"))
head(mel)
mel<-arrange(mel,YEAR)
meld<-arrange(meld,YEAR)
head(mel)
mel<-ts(mel$value,frequency=12)
meld<-ts(meld$value,frequency=12)
class(mel)
#model<-arima(mel,order=c(1,0,1),seasonal=list(order=c(1,1,1),period=24))
model<-Arima(mel,order=c(1,0,1),seasonal=list(order=c(1,1,1),period=12))
#model1<-auto.arima(mel)
#summary(model)
#tail(model)
library(forecast)
pre<-forecast(model,h=120)
#plot(pre)
plot(pre,xlim=c(61,65))
lines(meld,col='red')
#par(mfrow=c(1,2))
fit <- nnetar(mel)
plot(forecast(fit,h=120),xlim=c(61,73))
lines(meld,col='red')
#write.csv(pre,"predictedindia.csv")
